% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 13-Nov-2015 04:43:26
%
% This script assumes these variables are defined:
%
%   variables - input data.
%   vol - target data.
clear;
load('round1THourlyData.mat');
variables=[table2array(round1THourlyData(:,2:8))];
vol=table2array(round1THourlyData(:,9));

x = variables';
t = vol';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularization backpropagation.

% Create a Fitting Network
hiddenLayerSize = 14;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

% Save neural network
%save('NeuralNetFitting_HourlyData','net')

%% plotting
MAPE = abs(transpose(e)./vol);

figure

plot(y); hold all; plot(vol)
legend('Acutal','Predicted');
title(strcat('ANN Model','(MAPE=',num2str(round(MAPE)),'%)'));
ylabel('Gas Consumption (kWh)')
